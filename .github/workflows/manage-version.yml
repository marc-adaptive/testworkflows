name: Manage version

on:
  workflow_dispatch:
    inputs:
      release:
        description: Is release?
        required: true
        type: boolean
      pre-build:
        description: Is this before build?
        required: true
        type: boolean
      major-version:
        required: true
        description: major
        type: number
      minor-version:
        required: true
        description: minor
        type: number
      patch-version:
        required: true
        description: patch
        type: number
  workflow_call:
    inputs:
      release:
        description: Is release?
        required: true
        type: boolean
      pre-build:
        description: Is this before build?
        required: true
        type: boolean
      major-version:
        required: true
        type: number
      minor-version:
        required: true
        type: number
      patch-version:
        required: true
        type: number
    outputs:
      sha:
        description: Current SHA after version update
        value: ${{ jobs.manage-version.outputs.sha }}

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

jobs:
  manage-version:
    name: Used to update version, tag repo, and return sha
    runs-on: self-hosted
    outputs:
      sha: ${{ steps.return-sha.sha }}
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
      - name: Pre-build version
        id: identify-pre-build-version
        if: ${{ inputs.release && inputs.pre-build }}
        run: echo "BUILD_VERSION=${{ inputs.major-version }}.${{ inputs.minor-version }}.${{ inputs.patch-version }}" >> $GITHUB_ENV
      - name: Post-build version
        id: identify-post-build-version
        if: ${{ inputs.release && !inputs.pre-build }}
        shell: bash
        run:
          major=${{ inputs.major-version }}
          minor=${{ inputs.minor-version }}
          patch=${{ inputs.patch-version }}
  
          let "minor_incr=minor+1"
          let "patch_incr=patch+1"
          
          CREATE_BRANCH=true
          SNAPSHOT_VERSION="$major.$minor_incr.$patch"
          NEW_BRANCH="release-$major.$minor.$patch"
          BRANCH_SNAPSHOT_VERSION="$major.$minor.$patch_incr-SNAPSHOT"
  
          echo "release-version=$major.$minor.$patch" >> $GITHUB_ENV
          echo "create-branch=$CREATE_BRANCH" >> $GITHUB_ENV
          echo "snapshot-version=$SNAPSHOT_VERSION-SNAPSHOT" >> $GITHUB_ENV
          echo "new-branch=$NEW_BRANCH" >> $GITHUB_ENV
          echo "BUILD_VERSION=$BRANCH_SNAPSHOT_VERSION" >> $GITHUB_ENV
      - name: Test
        run: echo ${{ env.BUILD_VERSION }}
#      - name: Commit version to Current Branch
#        id: commit-version
#        if: ${{ inputs.release }}
#        run: |
#          git config user.name "github-actions"
#          git config user.email "build@aeron.io"
#          echo ${{ env.BUILD_VERSION }} > version.txt
#          git add version.txt
#          git status
#          git commit -m "${{ env.BUILD_VERSION }} released."
#          git push
#      - name: Tag Branch
#        id: tag-branch
#        if: ${{ inputs.release && inputs.pre-build }}
#        run: |
#          git tag -f ${{ env.BUILD_VERSION }}
#          git push origin refs/tags/${{ env.BUILD_VERSION }}
#      - name: Return current SHA
#        id: return-sha
#        run: |
#          git rev-parse HEAD
#          echo "sha=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"